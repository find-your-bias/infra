name: Infra CD

on:
  workflow_run:
    workflows: ["Setup Infra and Deploy GitHub Runner"]
    types:
      - completed
  
  workflow_dispatch: #manual trigger

jobs:
  deploy:
    runs-on: self-hosted

    steps:
      # Checkout the infra repo (this repo)
      - name: Checkout infra
        uses: actions/checkout@v4

      # Checkout each microservice repo
      - name: Checkout vote
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/vote-microservice
          token: ${{ secrets.GITHUB_TOKEN }}
          path: vote

      - name: Checkout result
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/result-microservice
          token: ${{ secrets.GITHUB_TOKEN }}
          path: result

      - name: Checkout worker
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/worker-microservice
          token: ${{ secrets.GITHUB_TOKEN }}
          path: worker

      - name: Checkout ai-analyzer
        uses: actions/checkout@v4
        with:
          repository: ${{ github.repository_owner }}/ai-analyzer-microservice
          token: ${{ secrets.GITHUB_TOKEN }}
          path: ai-analyzer

      # Gather all k8s-specifications manifests
      - name: Collect k8s-specifications manifests
        run: |
          mkdir all-k8s-specifications
          cp -r k8s-specifications/* all-k8s-specifications/ || true
          cp -r /home/ubuntu/actions-runner/_work/infra/infra/vote/k8s-specifications/* all-k8s-specifications/ || true
          cp -r /home/ubuntu/actions-runner/_work/infra/infra/result/k8s-specifications/* all-k8s-specifications/ || true
          cp -r /home/ubuntu/actions-runner/_work/infra/infra/worker/k8s-specifications/* all-k8s-specifications/ || true
          cp -r /home/ubuntu/actions-runner/_work/infra/infra/ai-analyzer/k8s-specifications/* all-k8s-specifications/ || true
      # Run your setup script
      - name: Run setup script
        run: bash setup.sh
      
      # configuring aws secret for ai-analyzer 
      - name: Configure AWS Secret for K8s
        run: |
          sudo -u ubuntu kubectl delete secret aws-credentials --ignore-not-found
          sudo -u ubuntu kubectl create secret generic aws-credentials \
            --from-literal=AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }} \
            --from-literal=AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
      
      # Apply all manifests
      - name: Apply Kubernetes manifests
        run: sudo -u ubuntu kubectl apply -R -f all-k8s-specifications/

